This project is to create an XML parser in Python capable of reading an LRG file
	LRG IN; FASTA OUT

Input:
	Pass file title to program as a string argument (cmd line)
	Optional argument to specify intronic sequence length around exons
	Pass optional command to specify genomic, cDNA, protein.. (genomic default)
	Program creates an output file based on the sequences used

Method:
	Command line arguments are supplied to specify the input file and specific parameters
	The appropriate sequence is read into a dictionary (multiple sequences where appropriate)
	Tree iteration is used to find the coordinate details for all exons
	The name of the output file is created using the input file title (LRG #)
	Using the coordinates and specific sequence type, the specific portions of sequence corresponding to each
		exon are output into a output file
	The presence of an existing file of the same title is checked
		If a file already exists, the user is prompted to overwrite (Y/N)
			If the user chooses to overwrite, the program continues
			If the user chooses not to, the program exits and reports that no output was created
	
	
Output:
	FastA file from LRG
	Each exon identified and corresponding sequence
	Details of exon (start, length..) and reference sequence 

 - where to store output (specify output path)

Testing:
	Correct performance of this program was confirmed by a combination of assert statements and 
	error handling techniques throughout the code. Try-catch blocks were used to handle loops and 
	element access which could produce issues in faulty XML files. Deliberately faulty XML files 
	were used to check the performance of these measures.
	Assert statements have been used to prevent users from inserting the wrong inputs into the program, 
	and to make sure that the number of valid command line arguments are not exceeded
	Assert statements are used throughout the indexing for string-slicing to ensure that the indexes 
	used are not out of bounds (such as when the exon coordinates for transcripts are used for protein sequences)
	Try-catches are used during opening the input file, accessing th sequence elements and determining the 
	intronic padding to be used when outputting the exons.
	A draft loop to detect an additional option for genomic, transcript and protein sequences has been written 
	and commented out. This would cause the program to choose between one of three separate methods, one for 
	each type. Only one has been written as of 20/11/2014, although this program is extensible.
	Exceptions were also used to provide users with readable error messages if 

